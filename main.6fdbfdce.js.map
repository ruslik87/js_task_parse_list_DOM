{"version":3,"sources":["scripts/main.js"],"names":["employees","document","querySelectorAll","sortList","list","sortSalary","forEach","el","parentElement","append","sort","a","b","first","formatData","dataset","salary","second","element","split","filter","includes","join","getEmployees","map","Employee","innerText","position","age","fullName","name"],"mappings":";AAAA,aAiDA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EA/CA,IAAMA,EAAgBC,EAAAA,SAASC,iBAAiB,OAE1CC,EAAW,SAACC,GACDC,EAAWD,GAEnBE,QAAQ,SAAAC,GACbA,EAAGC,cAAcC,OAAOF,MAItBF,EAAa,SAACD,GACXA,OAAAA,EAAKM,KAAK,SAACC,EAAGC,GACbC,IAAAA,EAAQC,EAAWH,EAAEI,QAAQC,QAG5BC,OAFQH,EAAWF,EAAEG,QAAQC,QAEpBH,KAIdC,EAAa,SAACI,GACX,OAACA,EACLC,MAAM,IACNC,OAAO,SAAAb,GAAM,MAAA,aAAac,SAASd,KACnCe,KAAK,KAGJC,EAAe,SAACnB,GACbA,OAAAA,EAAKoB,IAAI,SAAAjB,GACP,OAAA,IAAIkB,EACTlB,EAAGmB,UACHnB,EAAGQ,QAAQY,SACXpB,EAAGQ,QAAQC,OACXT,EAAGQ,QAAQa,QAKXH,EACJ,SAAYI,EAAAA,EAAUF,EAAUX,EAAQY,GAAK,EAAA,KAAA,GACtCE,KAAAA,KAAOD,EACPF,KAAAA,SAAWA,EACXX,KAAAA,OAASA,EACTY,KAAAA,IAAMA,GAIfzB,EAASH,GACTuB,EAAavB","file":"main.6fdbfdce.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst employees = [...document.querySelectorAll('li')];\n\nconst sortList = (list) => {\n  const sorted = sortSalary(list);\n\n  sorted.forEach(el => {\n    el.parentElement.append(el);\n  });\n};\n\nconst sortSalary = (list) => {\n  return list.sort((a, b) => {\n    const first = formatData(a.dataset.salary);\n    const second = formatData(b.dataset.salary);\n\n    return second - first;\n  });\n};\n\nconst formatData = (element) => {\n  return +element\n    .split('')\n    .filter(el => '0123456789'.includes(el))\n    .join('');\n};\n\nconst getEmployees = (list) => {\n  return list.map(el => {\n    return new Employee(\n      el.innerText,\n      el.dataset.position,\n      el.dataset.salary,\n      el.dataset.age\n    );\n  });\n};\n\nclass Employee {\n  constructor(fullName, position, salary, age) {\n    this.name = fullName;\n    this.position = position;\n    this.salary = salary;\n    this.age = age;\n  }\n}\n\nsortList(employees);\ngetEmployees(employees);\n"]}